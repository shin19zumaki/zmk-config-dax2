#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 4 ESCAPE      &kp Q             &kp W             &kp E     &kp R        &kp T      &kp Y          &kp U        &kp I      &kp O    &kp P      &kp EQUAL
&kp LEFT_CONTROL  &kp A             &kp S             &kp D     &lt 5 F      &kp G      &kp H          &lt 5 J      &kp K      &kp L    &kp MINUS  &mt RIGHT_CONTROL SEMICOLON
&kp LEFT_SHIFT    &kp Z             &kp X             &kp C     &kp V        &kp B      &kp N          &kp M        &kp COMMA  &kp DOT  &kp SLASH  &mt RIGHT_SHIFT SINGLE_QUOTE
                  &mt LEFT_ALT F11  &mt LEFT_GUI F12  &mkp MB1  &lt 1 SPACE  &lt 2 TAB  &kp BACKSPACE  &lt 1 ENTER
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        layer_1 {
            bindings = <
&none      &kp N1           &kp N2       &kp N3    &kp N4      &kp N5       &kp N6          &kp N7          &kp N8          &kp N9                &kp N0                 &kp PIPE
&kp LCTRL  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET       &kp AMPERSAND   &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_CONTROL
&kp LSHFT  &kp GRAVE        &kp TILDE    &none     &none       &kp UP       &kp LBKT        &kp RBKT        &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH          &kp RIGHT_SHIFT
           &kp LALT         &kp LGUI     &kp LEFT  &kp DOWN    &kp RIGHT    &kp LANGUAGE_2  &kp LANGUAGE_1
            >;
        };

        layer_2 {
            bindings = <
&none   &none   &none              &kp LS(LC(LG(N3)))  &kp LS(LC(LG(N4)))  &kp LS(LG(N5))  &none  &none  &none             &none              &none  &none
&trans  &none   &kp LA(LC(LG(S)))  &none               &kp LA(LC(LG(F)))   &none           &none  &none  &none             &none              &none  &trans
&trans  &none   &none              &kp LA(LC(LG(C)))   &none               &none           &none  &none  &kp LA(LC(LEFT))  &kp LA(LC(RIGHT))  &none  &trans
        &trans  &trans             &none               &none               &none           &none  &none
            >;
        };

        layer_3 {
            bindings = <
&none   &none   &none   &none  &none  &none  &none  &none  &none  &none  &none  &none
&trans  &none   &none   &none  &none  &none  &none  &none  &none  &none  &none  &trans
&trans  &none   &none   &none  &none  &none  &none  &none  &none  &none  &none  &trans
        &trans  &trans  &none  &none  &none  &none  &none
            >;
        };

        layer_4 {
            bindings = <
&none  &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &kp LA(LC(LG(U)))  &none  &none  &none  &none
&none  &kp LA(LC(LG(A)))  &none         &none         &none         &none         &none  &none              &none  &none  &none  &none
&none  &none              &none         &none         &none         &none         &none  &none              &none  &none  &none  &none
       &none              &none         &none         &none         &none         &none  &kp LA(LC(HOME))
            >;
        };

        SCROLL {
            bindings = <
&none   &none   &none   &none     &none     &none     &none     &none    &none  &none  &none  &none
&trans  &none   &none   &none     &none     &none     &none     &none    &none  &none  &none  &trans
&trans  &none   &none   &none     &none     &none     &none     &none    &none  &none  &none  &trans
        &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &kp HOME  &kp END
            >;
        };

        layer_6 {
            bindings = <
&none   &none   &none   &none  &none  &none  &none  &none  &none  &none  &none  &none
&trans  &none   &none   &none  &none  &none  &none  &none  &none  &none  &none  &trans
&trans  &none   &none   &none  &none  &none  &none  &none  &none  &none  &none  &trans
        &trans  &trans  &none  &none  &none  &none  &none
            >;
        };
    };
};
